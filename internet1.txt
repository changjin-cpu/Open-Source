一、七层模型与五层模型
（一）OSI 七层模型
1.物理层：
主要功能是在物理介质上传输原始的比特流。
涉及到电缆、连接器、信号的传输方式等。例如，双绞线、光纤等不同的传输介质在物理层起到了关键作用。
它定义了电气特性、机械特性、功能特性和规程特性，确保数据能够在物理线路上正确传输。
2.数据链路层：
负责将物理层传输的比特流组织成帧。
进行差错检测和纠正，确保数据的可靠传输。例如，以太网就是一种常见的数据链路层协议。
该层还包括 MAC 地址的使用，用于在局域网中唯一标识设备。
3.网络层：
主要功能是进行路由选择和数据包转发。
通过 IP 地址来确定数据包的传输路径。例如，路由器在网络层工作，根据 IP 地址将数据包从一个网络转发到另一个网络。
网络层还负责网络拥塞控制和流量控制等任务。
4.传输层：
提供端到端的数据传输服务。
确保数据的可靠、有序传输。例如，TCP（传输控制协议）和 UDP（用户数据报协议）是两种常见的传输层协议。
TCP 提供可靠的面向连接的服务，而 UDP 提供不可靠的无连接服务。
5.会话层：
建立、管理和终止应用程序之间的会话。
例如，在进行远程登录时，会话层负责建立和维护会话连接。
该层还可以进行会话同步，确保数据的正确交互。
6.表示层：
处理数据的表示方式，包括数据的编码、解码、加密、解密等。
确保不同系统之间能够正确地理解和交换数据。例如，将一种数据格式转换为另一种数据格式。
7.应用层：
为用户提供各种网络应用服务。
例如，电子邮件、文件传输、网页浏览等都是在应用层实现的。
应用层协议直接与用户交互，满足用户的各种需求。
（二）五层模型
1.物理层：与 OSI 七层模型中的物理层功能相同。
2.数据链路层：也与 OSI 七层模型中的数据链路层类似，但在具体协议和实现上可能有所不同。
3.网络层：
主要使用 IP 协议进行数据包的路由选择和转发。
与 OSI 七层模型中的网络层功能基本一致，但更加注重实际的网络应用。
4.传输层：同样包括 TCP 和 UDP 等协议，提供端到端的数据传输服务。
5.应用层：
整合了 OSI 七层模型中的会话层、表示层和应用层的功能。
直接为用户提供各种网络应用服务，如 HTTP、FTP、SMTP 等协议都在这一层实现。

ps：五层模型中的应用层整合了七层模型中会话层、表示层和应用层的功能。

二、http与https
HTTP（超文本传输协议）和 HTTPS（超文本传输安全协议）都是用于在客户端和服务器之间传输数据的协议，但它们之间存在以下重要区别：
1、安全性
HTTP 是不安全的协议，数据以明文形式在网络中传输，容易被窃听、篡改或劫持。例如，当你使用 HTTP 访问一个网站时，你的请求和服务器的响应都可以被黑客轻易地拦截和查看，可能导致你的个人信息、登录凭证等敏感数据泄露。
HTTPS 则是安全的协议，通过在传输层和应用层之间加入 SSL/TLS 层来对数据进行加密。这意味着即使数据被拦截，黑客也无法读取其中的内容。此外，HTTPS 还可以进行身份验证，确保你连接的服务器是真实可信的。
2、连接方式
HTTP 使用简单的 TCP 连接，连接建立相对较快，但缺乏安全性保障。
HTTPS 在建立连接时，首先进行 SSL/TLS 握手，这个过程会稍微增加一些连接建立的时间。在握手过程中，客户端和服务器会协商加密算法、交换密钥等，以确保后续的数据传输安全。
3、端口号
HTTP 通常使用端口 80 进行通信。
HTTPS 使用端口 443。
4、证书要求
HTTPS 需要服务器拥有数字证书，证书由权威的证书颁发机构（CA）颁发。证书中包含了服务器的公钥、域名等信息，客户端可以通过验证证书的合法性来确认服务器的身份。
HTTP 不需要证书。
5、性能影响
由于 HTTPS 需要进行加密和解密操作，以及额外的握手过程，所以在一定程度上会比 HTTP 消耗更多的服务器资源和网络带宽，可能会导致性能略有下降。
但是，随着硬件性能的提升和优化技术的发展，这种性能差距正在逐渐缩小。
6、应用场景
对于一些对安全性要求不高的场景，如普通的网页浏览、信息查询等，可以使用 HTTP。
而对于涉及敏感信息传输、电子商务、金融交易等场景，必须使用 HTTPS 来确保数据的安全。
总之，HTTPS 相比 HTTP 提供了更高的安全性，但也带来了一些性能上的开销。在实际应用中，应根据具体的需求和场景来选择使用合适的协议。

三、socket与websocket
Socket 和 WebSocket 都是用于实现网络通信的技术，但它们在很多方面存在区别：
1、定义与基本概念
Socket（套接字）：
是一种通用的网络编程接口，它提供了一种在不同主机之间进行双向通信的方式。
可以用于实现各种网络协议的通信，如 TCP、UDP 等。
通常需要在客户端和服务器端分别进行编程实现，对开发者的网络编程能力要求较高。
WebSocket：
是一种基于 HTTP 协议的全双工通信协议，主要用于在 Web 浏览器和服务器之间实现实时通信。
它建立在现有的 Web 基础设施之上，使得在 Web 环境中实现实时通信更加容易。
由客户端发起连接请求，服务器端响应后建立连接，一旦连接建立，双方可以随时发送和接收数据。
2、通信方式
Socket：
可以实现全双工通信，即客户端和服务器可以同时发送和接收数据。
通信双方需要事先知道对方的 IP 地址和端口号，通过建立连接进行通信。
适用于各种类型的网络应用，包括但不限于文件传输、远程控制、即时通讯等。
WebSocket：
也是全双工通信，一旦连接建立，双方可以随时发送和接收数据。
基于 HTTP 协议进行握手建立连接，连接建立后使用自定义的协议进行数据传输。
主要用于 Web 应用中的实时通信，如在线聊天、实时数据更新等。
3、应用场景
Socket：
适用于需要高度定制化和对性能要求较高的网络应用。
例如，大型网络游戏、分布式系统、高性能服务器等。
可以根据具体需求选择不同的网络协议和通信模式，具有很大的灵活性。
WebSocket：
主要用于 Web 应用中的实时交互场景。
比如在线协作工具、实时股票行情、社交网络的实时通知等。
利用现有的 Web 技术和基础设施，方便快捷地实现实时通信功能。
4、开发难度
Socket：
开发相对复杂，需要深入了解网络编程知识和底层协议。
需要处理各种网络异常情况，如连接中断、数据包丢失等。
不同的编程语言和平台可能有不同的 Socket 实现方式，增加了开发的难度和复杂性。
WebSocket：
开发相对容易，因为它是基于现有的 Web 标准和技术。
大多数现代编程语言和 Web 框架都提供了对 WebSocket 的支持，开发者可以快速上手。
由于建立在 HTTP 协议之上，一些网络问题可以由底层的 Web 服务器和浏览器处理，减轻了开发者的负担。
总之，Socket 和 WebSocket 各有其特点和适用场景。Socket 是一种通用的网络编程接口，适用于各种类型的网络应用，但开发难度较大；WebSocket 则是专门为 Web 应用中的实时通信设计的协议，开发相对容易，且利用了现有的 Web 技术和基础设施。在实际应用中，应根据具体需求选择合适的技术。


